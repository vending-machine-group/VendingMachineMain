package vendingmachine;

public class Item {
    //create the food object for use 
        private Food food = new Food();
        private Drink drink = new Drink();
        private Miscellaneous miscellaneous = new Miscellaneous();
        //allow for only one item that all the classes use
        private static Item item;
        
        //constructor for item that allows only one item to be made
        private Item(){
            
        }
        
        //function is called to create instances of the item class
        //only allows one item to be created, item is also static so many objects reference one item
        public Item createItem(){
        //ensure item is not already made
            if(item == null){
                item = new Item();
            }
            //return the created singleton item
            return item;
        }
           
        //Use radio buttons to find which value is selected, this can be done in the vedning machine frame
        //Have the first radio button correlate to the value 0, and so on
   //enter the index of the food and return its price
    public Double getFoodPrice(Integer indexOfFood){
        //call the getPrice method from food to get the price of the specified item
        return food.getPrice(indexOfFood);
       }
    
    //method to get the food name, used to populate the machine on startup
    public String getFoodName(Integer indexOfFood){
        return food.getFoodName(indexOfFood);
    }
    
    //call to remove a purchased food from stock
    public Boolean buyFood(Integer indexOfFood, Integer amountOfFoodBought){
        //takes in index of purchase and amount of items purchased
        return food.buyFood(indexOfFood, amountOfFoodBought);
    }
    
    //enter the index of drink to find the price
    public Double getDrinkPrice(Integer indexOfDrink){
        //call the getPrice method from drink to get the price of the specified item
        return drink.getPrice(indexOfDrink);
    }
     //method to get the drink name, used to populate the machine on startup
    public String getDrinkName(Integer indexOfDrink){
        return drink.getDrinkName(indexOfDrink);
    }
    
    //call to remove a purchased drinks from stock
    public Boolean buyDrinks(Integer indexOfDrink, Integer amountOfDrinksBought){
        //takes in index of purchase and amount of items purchased
        return drink.buyDrink(indexOfDrink, amountOfDrinksBought);
    }
    
    //get the price of misc from its index
    public Double getMiscellaneousPrice(Integer indexOfMiscellaneous){
        //call the getPrice method from Misc to get the price of the specified item
        return miscellaneous.getPrice(indexOfMiscellaneous);
    }
    
     //method to get the misc. name, used to populate the machine on startup
    public String getMiscellaneousName(Integer indexOfMiscellaneous){
        return miscellaneous.getMiscellaneousName(indexOfMiscellaneous);
    }
    
    //call to remove a purchased misc. stuff
    public Boolean buyMiscellaneous(Integer indexOfMiscellaneous, Integer amountOfMiscellaneousBought){
        //takes in index of purchase and amount of items purchased
        return miscellaneous.buyMiscellaneous(indexOfMiscellaneous, amountOfMiscellaneousBought);
    }
}

